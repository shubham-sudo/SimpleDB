package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate joinPredicate;
    private DbIterator child1;
    private DbIterator child2;
    private HashMap<Field, List<Tuple>> child1Partitions;
    private Tuple tuple2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.child1Partitions = new HashMap<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	    return this.child1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return this.child2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.child1.open();
        this.child2.open();
        makeChild1Partitions();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.child1.close();
        this.child2.close();
        child1Partitions = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.child1.rewind();
        this.child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    private void makeChild1Partitions() throws TransactionAbortedException, DbException {
        while (child1.hasNext()){
            Tuple tuple = child1.next();
            Field field = tuple.getField(this.joinPredicate.getField1());
            if (!child1Partitions.containsKey(field)){
                child1Partitions.put(field, new ArrayList<>());
            }
            child1Partitions.get(field).add(tuple);
        }
    }

    private Tuple joinedTuple(Tuple tuple1, Tuple tuple2){
        Tuple newTuple = new Tuple(this.getTupleDesc());
        int k = 0;
        for (int i = 0; i < tuple1.getTupleDesc().numFields(); i++){
            newTuple.setField(k, tuple1.getField(i));
            k++;
        }
        for (int i = 0; i < tuple2.getTupleDesc().numFields(); i++){
            newTuple.setField(k, tuple2.getField(i));
            k++;
        }
        return newTuple;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()){
            return joinedTuple(listIt.next(), tuple2);
        }
        while (child2.hasNext()){
            tuple2 = child2.next();
            List<Tuple> tuples = child1Partitions.get(tuple2.getField(joinPredicate.getField2()));
            if (tuples != null){
                listIt = tuples.iterator();
                return joinedTuple(listIt.next(), tuple2);
            }
        }
        child2.rewind();
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] { child1, child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }
}
