## **CS 660 Fall-2022 (Programming Assignment #3)**

### **Student Details**

_**Name**_ - Shubham Kaushik

_**Email**_ - kaushiks@bu.edu

---

### **Write Up**

1. Describe any design decisions you made. These may be minimal for pa3

    - For `Join`, a simple nested loop join is used, in which it will iterate over one child only once and compare with each tuple of another child.
      So, if relation R has N records and S has M records it will run do IO for (N + (N*M)).
    - For `HashEquiJoin`, partitions are only done for one of the child and stored in-memory. The hasNext will pull one tuple from another child and
      do hashing over the join value and pull that particular partition for first child. This way it will save some comparison assuming the data is
      uniformly distributed

2. Discuss and justify any changes you made to the API

    - _**Filter, Join & HashEquiJoin**_ : Added required class variables and implemented the hasNext() method call to return the results after filter,
                                          join and hashJoin. The strategy used for join is simple nested loop join and
                                          for hashEquiJoin I have used hashing and making partition for one child.
    - _**IntegerAggregator, StringAggregator, Aggregate**_ : Implemented integer & string aggregate classes for aggregating on the required column
                                          based on groupby if given.
    - _**HeapPage, HeapFile**_ : Implemented insert and delete tuples method to add mutability of tuples in pages or file. Also, eviction is checked for both operations.
    - _**Insert, Delete**_ : Insert and delete operators are implemented for inserting the new record or deleting the existing one.


3. Describe any missing or incomplete elements of your code

    - As per my knowledge, all the elements required for pa3 are complete in my assignment. The only part I could guess is the use of transactionId are not in use for anything as of now.

4. Describe how long you spent on the assignment, and whether there was anything you found particularly difficult or confusing

    - For this assignment, I've spent around 1 week to understand and start myself writing code. There were two things which were a bit tricky for me,
      first the approach for HashEquiJoin, in which I was thinking to create new file for partitions in disk and pull each partition for each child only once,
      but due to less time I dropped that idea and used simpler approach.

5. If you collaborate with someone else, you have to discribe how you split the workload

    - I worked alone on this assignment but yes the discussion in labs, javadoc and slide for simpledb helped a lot to speed up.

---
