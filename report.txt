## **CS 660 Fall-2022 (Programming Assignment #2)**

### **Student Details**

_**Name**_ - Shubham Kaushik

_**Email**_ - kaushiks@bu.edu

---

### **Write Up**

1. Describe any design decisions you made. These may be minimal for pa1

    - Using the same `ConcurrentHashMap` for defining private variable in `class Catalog` to make it thread safe.
    - The `ConcurrentHashMap` is used as a cache and pages are evicted based on the requirement. There is no such policy
      to pop-out pages from the cache. Its just checking isDirty property of the page and pop out the page from cache.

2. Discuss and justify any changes you made to the API

    - _**class BTreeFile**_ :

        ## SEARCH NODE ##
        + _**findLeafPage()**_ : This method is used to pull leaf page as per the given Field key value. This is implemented
                                 using recursion. If the Field value is passed as 'null', it will pull the left most page at leaf level.

        ## INSERT NEW NODE ##
        + _**splitLeafPage()**_ : This method help in splitting the leaf page when we insert more values and the leaf page is full.
                                  The middle node is copied to the internal nodes after splitting and parent & sibling pointer are updated.
        + _**splitInternalPage()**_ : The method do the splitting part for the internal node. This also increases the height
                                      of the BTree and push the middle node towards the parent node.

        ## DELETE EXISTING NODE ##
        + _**stealFromLeafPage()**_ : The method is used for the Deletion purpose, if the tuples are less than half full in any leaf node.
                                      It will try to steal nodes from its siblings.
        + _**stealFromLeftInternalPage()**_ : This method is for stealing nodes from the sibling when the internal node
                                              is out of its half full capacity.
        + _**stealFromRightInternalPage()**_ : This is similar to the upper method just be used when stealing nodes from
                                               right internal node, instead of left.
        + _**mergeLeafPages()**_ : While deletion if the stealing doesn't work out than merging of two nodes happens in BTree.
                                   The mergeLeafPages merges the leaf pages whenever required.
        + _**mergeInternalPages()**_ : This is same as above just to merge the internal nodes.

    - _**class IndexPredicate**_ : Updated to compare the field values using the given operators. The operators are defined as enums
                                   The Comparison is done based in the given '>=', '<=', '==' operators.
    - _**class Predicate**_ : Defined the required class variables to support IndexPredicate class operations.


3. Describe any missing or incomplete elements of your code

    - As per my knowledge, all the elements required for lab2 are complete in my assignment. The only part I could guess is the use of transactionId are not in use for anything as of now.

4. Describe how long you spent on the assignment, and whether there was anything you found particularly difficult or confusing

    - For this assignment, I've spent around 1 week to understand and start myself writing code. There were two things which were a bit tricky for me,
      first the tracking of BTreeEntries while doing operations like splitting or deleting of nodes, second was to think all the edge cases to stick every pointer at right place.

5. If you collaborate with someone else, you have to discribe how you split the workload

    - I worked alone on this assignment but yes the discussion in labs, javadoc and slide for simpledb helped a lot to speed up.

---
